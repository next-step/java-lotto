package lotto.domain;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

import static lotto.domain.LottoConstant.TICKET_NUMBER_SIZE;

public class LottoTicket {
    private final boolean isAutoGenerated;
    private final List<LottoNumber> numbers;

    public LottoTicket(List<Integer> numbers) {
        this(true, numbers);
    }

    public LottoTicket(boolean isAutoGenerated, List<Integer> numbers) {
        validateNumberSize(numbers);
        validateNotDuplicate(numbers);
        this.isAutoGenerated = isAutoGenerated;
        this.numbers = numbers.stream()
                .map(LottoNumber::new)
                .sorted()
                .collect(Collectors.toList());
    }

    private void validateNumberSize(List<Integer> numbers) {
        if (numbers.size() != TICKET_NUMBER_SIZE)
            throw new IllegalArgumentException("number size should be 6.");
    }

    private void validateNotDuplicate(List<Integer> numbers) {
        Set<Integer> set = new HashSet<>(numbers);
        if (set.size() != numbers.size())
            throw new IllegalArgumentException("number should not be duplicate.");
    }


    public List<Integer> getNumbers() {
        return numbers.stream()
                .map(LottoNumber::getNumber)
                .collect(Collectors.toList());
    }

    public int countMatchNumbers(LottoTicket ticket) {
        return (int) numbers.stream()
                .filter(ticket.numbers::contains)
                .count();
    }

    public boolean contains(LottoNumber bonus) {
        return numbers.contains(bonus);
    }

    public boolean isAutoGenerated() {
        return isAutoGenerated;
    }
}
